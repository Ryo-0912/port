<style>
.main{
  display: flex;
}
.review-index {
  font-family: ヒラギノ丸ゴ Pro;
  text-decoration: none;
}
.genre {
  font-family: ヒラギノ丸ゴ Pro;
}
.accordion {
  font-family: ヒラギノ丸ゴ Pro;
  max-height: 45em;
  overflow-y: scroll;
  border-radius: 0 0 15px 15px;
}
.edit-btn {
  margin-left: 30px;
  text-decoration: none;
}
.gen {
  font-family: ヒラギノ丸ゴ Pro;
  text-decoration: none;
}
.delete-btn {
  right: 5px;
  text-decoration: none;
}
.side {
  border-radius: 15px;
  background-color: #afeeee;
  width:210px; # 200から1000
  height:600px;
  text-align:center;
  position: relative;
}

.newregister{
  position   : relative;
}

.register{
  font-family: ヒラギノ丸ゴ Pro;
  position   : absolute;                /* 親要素を基準 */
  display: none;                        /* 要素を非表示 */
  padding: 2px;                         /* テキストの前後の余白 */
  background-color: rgba(0, 0, 0, 0.70);       /* 背景色（透明度） */
  width:70px;                          /* 吹き出し全体の幅 */
  left : 80%;                           /* 表示位置 */
  bottom : -200%;                        /* 表示位置 */
  margin-bottom : 12px;                 /* 表示位置 */
  font-size: 80%;
  color: #FFFFFF;
  border-radius: 5px;
}

.register:after{
  content: "";                       /* コンテンツの挿入 */
  position: absolute;                /* 親要素を基準 */
}

.newregister:hover .register{
  display: block;
}

.createQ{
  font-family: ヒラギノ丸ゴ Pro;
  text-decoration: none;
  left: 1650px;
  font-size: 30px;
  top: 120px;
  position: fixed;
}
.memoryindex{
  width: 1400px;
  margin-left: 20px;
  max-height: 50.5em;
}
.page{
  position: fixed;
  top: 920px;
}
.pagination>li>a {
  border: none;     /*枠線をなくす*/
  color: #696969;   /*文字の色を変える*/
  margin-left: 827px;  /*ここでmargin: auto;を使っても適用されなかったのはなぜ？*/
}

/* 表示しているページ番号のデザイン */
.pagination>.active>a {
  background: #93c9ff;     /*背景の色を変える*/
  border-radius: 20px;     /*角を丸くする*/
}

/*ホバー時のデザイン*/
.pagination>li>a:hover {
  border-radius: 20px;    /*角を丸くする*/
}
.card{
  box-shadow: 0 0 3px 0 rgba(0,0,0,.12), 0 2px 3px 0 rgba(0,0,0,.22);
	transition: .3s;
}
.card:hover{
  box-shadow: 10px 10px 15px -10px;
}
.card-body{
  font-family: ヒラギノ丸ゴ Pro;
  min-height: 10em;
  max-height: 30em;
  overflow-y: auto;
}
</style>

<%= render 'shared/header' %>

<div class="main">
  <div class="side">
    <svg style="display: none;">
      <symbol id="icon-add" viewBox="0 0 24 24">
        <path d="M18 13h-5v5c0 .55-.45 1-1 1s-1-.45-1-1v-5H6c-.55 0-1-.45-1-1s.45-1 1-1h5V6c0-.55.45-1 1-1s1 .45 1 1v5h5c.55 0 1 .45 1 1s-.45 1-1 1z"></path>
      </symbol>
    </svg><br>

    <span class="genre"><%= "ジャンル" %></span>

    <% if current_page?(genres_path) %>
      <span class="newregister">
        <button id="gbtn" class="knopf even pill shade inverse m-">
          <svg class="icon">
            <use xlink:href="#icon-add"></use>
          </svg>
        </button>
        <span class="register"><%= "新規登録" %></span>
      </span>
    <% end %><br>

    <br>
    <div class="accordion" id="accordionExample">
      <div class="accordion-item">
        <%= link_to "復習一覧", genres_review_questions_path, {class: "review-index"} %>
          <% genres = current_user.genres.grouping_genres.sort_by{ |g| g[0] } %>
            <% genres.each_with_index do |(key, value), index| %>
              <h2 class="accordion-header" id="heading">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse<%= index %>" aria-expanded="true" aria-controls="collapse<%= index %>">
                  <%= key %>
                </button>
              </h2>
              <div id="collapse<%= index %>" class="accordion-collapse collapse" aria-labelledby="heading" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                  <% value.sort_by{ |g| g.hiragana }.each do |v| %>
                    <span class="edit_btn" id="edit-btn" data-name='<%= v.name %>' data-id='<%= v.id %>'></span>
                  <% end %>
                </div>
              </div>
            <% end %>
      </div>
    </div>
  </div>

  <%= javascript_pack_tag 'edit_delete_vue' %>

  <div class="memoryindex">
    <div class="row row-cols-1 row-cols-md-2 g-4">
      <% @questions.each do |question| %>
        <div class="cards" id="card" data-name="card" data-url="/questions/<%= question.id %>">
          <div class="card border-dark mb-3 h-100" style="height: 30rem, width: 48rem;">
            <div class="card-body">
              <h2 class="card-title"><%= (t '.q') %></h2>
              <p class="card-text"><%= question.statement %></p>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <span><%=link_to (t '.createq'), new_genre_question_path, { class: "createQ"} %></span>
  <div class="page"><%= paginate @questions %></div>
</div>

<script>
    const cards = document.getElementsByClassName('cards') /* クラス名が「cards」の要素をすべて取得し、定数cardsとして代入する
                                                           ただ、ここで取得できるのは「配列に似ているが、実際には配列ではなく、HTMLcollectionオブジェクトを返す」 */
    for (let card of cards) {                              //for (仮変数 of 配列){(処理)} この構文では配列の中の値を出力
      card.addEventListener('click', () => {
        console.log(card);                                  //ここで呼び出される値は各cardの情報データ?
        open (card.dataset.url);                           //各cardのdata属性のURLを取得し、openメソッドを適用
      })
    }
</script>
